// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "arduino-create-agent": Application Controllers
//
// Command:
// $ main

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// CommandsV1Controller is the controller interface for the CommandsV1 actions.
type CommandsV1Controller interface {
	goa.Muxer
	Exec(*ExecCommandsV1Context) error
	List(*ListCommandsV1Context) error
	Show(*ShowCommandsV1Context) error
}

// MountCommandsV1Controller "mounts" a CommandsV1 resource controller on the given service.
func MountCommandsV1Controller(service *goa.Service, ctrl CommandsV1Controller) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/:id", ctrl.MuxHandler("preflight", handleCommandsV1Origin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/", ctrl.MuxHandler("preflight", handleCommandsV1Origin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExecCommandsV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(ExecCommandsV1Payload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Exec(rctx)
	}
	h = handleCommandsV1Origin(h)
	service.Mux.Handle("POST", "/:id", ctrl.MuxHandler("exec", h, unmarshalExecCommandsV1Payload))
	service.LogInfo("mount", "ctrl", "CommandsV1", "action", "Exec", "route", "POST /:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCommandsV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleCommandsV1Origin(h)
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "CommandsV1", "action", "List", "route", "GET /")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowCommandsV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleCommandsV1Origin(h)
	service.Mux.Handle("GET", "/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "CommandsV1", "action", "Show", "route", "GET /:id")
}

// handleCommandsV1Origin applies the CORS response headers corresponding to the origin.
func handleCommandsV1Origin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalExecCommandsV1Payload unmarshals the request body into the context request data Payload field.
func unmarshalExecCommandsV1Payload(ctx context.Context, service *goa.Service, req *http.Request) error {
	var payload ExecCommandsV1Payload
	if err := service.DecodeRequest(req, &payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload
	return nil
}

// ConnectV1Controller is the controller interface for the ConnectV1 actions.
type ConnectV1Controller interface {
	goa.Muxer
	Websocket(*WebsocketConnectV1Context) error
}

// MountConnectV1Controller "mounts" a ConnectV1 resource controller on the given service.
func MountConnectV1Controller(service *goa.Service, ctrl ConnectV1Controller) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/connect", ctrl.MuxHandler("preflight", handleConnectV1Origin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewWebsocketConnectV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Websocket(rctx)
	}
	h = handleConnectV1Origin(h)
	service.Mux.Handle("GET", "/v1/connect", ctrl.MuxHandler("websocket", h, nil))
	service.LogInfo("mount", "ctrl", "ConnectV1", "action", "Websocket", "route", "GET /v1/connect")
}

// handleConnectV1Origin applies the CORS response headers corresponding to the origin.
func handleConnectV1Origin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// DiscoverV1Controller is the controller interface for the DiscoverV1 actions.
type DiscoverV1Controller interface {
	goa.Muxer
	List(*ListDiscoverV1Context) error
}

// MountDiscoverV1Controller "mounts" a DiscoverV1 resource controller on the given service.
func MountDiscoverV1Controller(service *goa.Service, ctrl DiscoverV1Controller) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/discover", ctrl.MuxHandler("preflight", handleDiscoverV1Origin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListDiscoverV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleDiscoverV1Origin(h)
	service.Mux.Handle("GET", "/v1/discover", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "DiscoverV1", "action", "List", "route", "GET /v1/discover")
}

// handleDiscoverV1Origin applies the CORS response headers corresponding to the origin.
func handleDiscoverV1Origin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ManageV1Controller is the controller interface for the ManageV1 actions.
type ManageV1Controller interface {
	goa.Muxer
	Info(*InfoManageV1Context) error
}

// MountManageV1Controller "mounts" a ManageV1 resource controller on the given service.
func MountManageV1Controller(service *goa.Service, ctrl ManageV1Controller) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/manage", ctrl.MuxHandler("preflight", handleManageV1Origin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInfoManageV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Info(rctx)
	}
	h = handleManageV1Origin(h)
	service.Mux.Handle("GET", "/v1/manage", ctrl.MuxHandler("info", h, nil))
	service.LogInfo("mount", "ctrl", "ManageV1", "action", "Info", "route", "GET /v1/manage")
}

// handleManageV1Origin applies the CORS response headers corresponding to the origin.
func handleManageV1Origin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// PublicController is the controller interface for the Public actions.
type PublicController interface {
	goa.Muxer
	goa.FileServer
}

// MountPublicController "mounts" a Public resource controller on the given service.
func MountPublicController(service *goa.Service, ctrl PublicController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/debug", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/docs", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "swagger/swagger.json")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/debug", "templates/debug.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/debug", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "templates/debug.html", "route", "GET /debug")

	h = ctrl.FileHandler("/docs", "templates/docs.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/docs", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "templates/docs.html", "route", "GET /docs")
}

// handlePublicOrigin applies the CORS response headers corresponding to the origin.
func handlePublicOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ToolsV1Controller is the controller interface for the ToolsV1 actions.
type ToolsV1Controller interface {
	goa.Muxer
	Download(*DownloadToolsV1Context) error
	List(*ListToolsV1Context) error
}

// MountToolsV1Controller "mounts" a ToolsV1 resource controller on the given service.
func MountToolsV1Controller(service *goa.Service, ctrl ToolsV1Controller) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/tools/:packager/:name/:version", ctrl.MuxHandler("preflight", handleToolsV1Origin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/tools/", ctrl.MuxHandler("preflight", handleToolsV1Origin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDownloadToolsV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Download(rctx)
	}
	h = handleToolsV1Origin(h)
	service.Mux.Handle("POST", "/v1/tools/:packager/:name/:version", ctrl.MuxHandler("download", h, nil))
	service.LogInfo("mount", "ctrl", "ToolsV1", "action", "Download", "route", "POST /v1/tools/:packager/:name/:version")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListToolsV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleToolsV1Origin(h)
	service.Mux.Handle("GET", "/v1/tools/", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "ToolsV1", "action", "List", "route", "GET /v1/tools/")
}

// handleToolsV1Origin applies the CORS response headers corresponding to the origin.
func handleToolsV1Origin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// UploadV1Controller is the controller interface for the UploadV1 actions.
type UploadV1Controller interface {
	goa.Muxer
	Serial(*SerialUploadV1Context) error
	Show(*ShowUploadV1Context) error
}

// MountUploadV1Controller "mounts" a UploadV1 resource controller on the given service.
func MountUploadV1Controller(service *goa.Service, ctrl UploadV1Controller) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/upload", ctrl.MuxHandler("preflight", handleUploadV1Origin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/upload/:id", ctrl.MuxHandler("preflight", handleUploadV1Origin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSerialUploadV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UploadSerial)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Serial(rctx)
	}
	h = handleUploadV1Origin(h)
	service.Mux.Handle("POST", "/v1/upload", ctrl.MuxHandler("serial", h, unmarshalSerialUploadV1Payload))
	service.LogInfo("mount", "ctrl", "UploadV1", "action", "Serial", "route", "POST /v1/upload")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowUploadV1Context(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleUploadV1Origin(h)
	service.Mux.Handle("GET", "/v1/upload/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "UploadV1", "action", "Show", "route", "GET /v1/upload/:id")
}

// handleUploadV1Origin applies the CORS response headers corresponding to the origin.
func handleUploadV1Origin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, X-Requested-With, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalSerialUploadV1Payload unmarshals the request body into the context request data Payload field.
func unmarshalSerialUploadV1Payload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &uploadSerial{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
