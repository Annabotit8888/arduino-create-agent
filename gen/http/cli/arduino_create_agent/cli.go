// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// arduino-create-agent HTTP client CLI support package
//
// Command:
// $ goa gen github.com/arduino/arduino-create-agent/design -debug

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	toolsc "github.com/arduino/arduino-create-agent/gen/http/tools/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `tools list
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` tools list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		toolsFlags = flag.NewFlagSet("tools", flag.ContinueOnError)

		toolsListFlags = flag.NewFlagSet("list", flag.ExitOnError)
	)
	toolsFlags.Usage = toolsUsage
	toolsListFlags.Usage = toolsListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "tools":
			svcf = toolsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "tools":
			switch epn {
			case "list":
				epf = toolsListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "tools":
			c := toolsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// toolsUsage displays the usage of the tools command and its subcommands.
func toolsUsage() {
	fmt.Fprintf(os.Stderr, `The tools service managed the tools installed in the system.
Usage:
    %s [globalflags] tools COMMAND [flags]

COMMAND:
    list: List implements list.

Additional help:
    %s tools COMMAND --help
`, os.Args[0], os.Args[0])
}
func toolsListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tools list

List implements list.

Example:
    `+os.Args[0]+` tools list
`, os.Args[0])
}
